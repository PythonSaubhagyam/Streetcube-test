import datetimefrom flask_login import UserMixinfrom sqlalchemy.orm import relationshipfrom slugify import  slugifyfrom streetcube import dbfrom decimal import Decimalclass UserRoles(db.Model):    id = db.Column(db.Integer, primary_key=True)    role_title = db.Column(db.String(150), nullable=False, unique=True)    privileges = db.Column(db.Text, nullable=True)    is_active = db.Column(db.Boolean, default=True)    def __repr__(self):        return self.role_titileclass UserInfo(UserMixin, db.Model):    id = db.Column(db.Integer, primary_key=True)    # role_id = db.Column(db.Integer, db.ForeignKey(UserRoles.id, onupdate='CASCADE', ondelete='CASCADE'))    uname = db.Column(db.String(150), nullable=True)    first_name = db.Column(db.String(150), nullable=True)    last_name = db.Column(db.String(150), nullable=True)    gender = db.Column(db.String(50), nullable=True)    name_prfx = db.Column(db.String(250), nullable=True)    dob = db.Column(db.String(250), nullable=True)    email = db.Column(db.String(150), unique=True, nullable=True)    mobile = db.Column(db.BigInteger, unique=True, nullable=True)    home_phone = db.Column(db.BigInteger, unique=True, nullable=True)    # otp = db.Column(db.Integer, nullable=False)    is_show_mobile = db.Column(db.Boolean, default=False)    password = db.Column(db.String(250), nullable=False)    user_role = db.Column(db.Integer, db.ForeignKey(UserRoles.id))    profile_pic = db.Column(db.String(100), nullable=True)    zipcode = db.Column(db.String(250), nullable=True)    address = db.Column(db.String(1000), nullable=True)    city = db.Column(db.String(150), nullable=True)    town = db.Column(db.String(150), nullable=True)    register_date = db.Column(db.DateTime, default=datetime.datetime.utcnow)    is_active = db.Column(db.Boolean, default=True)    is_mobile_verified = db.Column(db.Boolean, default=False)    is_email_verified = db.Column(db.Boolean, default=False)    forget_password_key = db.Column(db.String(150), nullable=True)    referral_code = db.Column(db.String(250), nullable=True)    session_token = db.Column(db.String(250), nullable=True)    trm_condition = db.Column(db.Boolean, default=True)    no_of_logins = db.Column(db.Integer,default=0)    cano_url= db.Column(db.String(255), nullable=True)                       def __init__(self,uname,cano_url,last_name, email, password, mobile,address,         is_show_mobile, is_mobile_verified,no_of_logins,user_role,name_prfx=None,dob=None,        city=None,home_phone=None,town=None,zipcode=None):        # self.first_name = first_name        # self.last_name = last_name        # self.gender = gender        self.name_prfx = name_prfx        self.dob = dob        self.cano_url = cano_url        self.uname = uname        self.last_name = last_name        self.email = email        self.password = password        self.mobile = mobile        self.home_phone = home_phone        self.address = address        self.town = town        self.city = city        self.is_show_mobile = is_show_mobile        # self.trm_condition= trm_condition        self.user_role = user_role        self.zipcode = zipcode        # self.register_date = register_date        # self.is_active = is_active        self.is_mobile_verified = is_mobile_verified        self.no_of_logins = no_of_logins                      # self.otp = otp        # self.is_email_verified = is_email_verified        # self.forget_password_key = forget_password_key        # self.referral_code = referral_code        # self.session_token = session_token    def __repr__(self):        return self.uname    def verify_password(self, password):        return pwd_context.verify(password, self.password_hash)    class Gazebo_process_3rd(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    nationality = db.Column(db.String(150), nullable=True)    passport_no = db.Column(db.String(150), nullable=True)    national_insurance_no = db.Column(db.String(150), nullable=True)    known_medical_conditions = db.Column(db.String(150), nullable=True)    next_of_kin_name = db.Column(db.String(150), nullable=True)    next_of_kin_contact = db.Column(db.String(150), nullable=True)           def __init__(self,member_id,nationality,passport_no,national_insurance_no,known_medical_conditions,next_of_kin_name,next_of_kin_contact):        self.member_id = member_id        self.nationality = nationality        self.passport_no = passport_no        self.national_insurance_no = national_insurance_no        self.known_medical_conditions = known_medical_conditions        self.next_of_kin_name = next_of_kin_name        self.next_of_kin_contact = next_of_kin_contact     class Gazebo_process_4th(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    food_style = db.Column(db.String(150), nullable=True)    describe_food_style = db.Column(db.String(150), nullable=True)    suplier_list = db.Column(db.String(150), nullable=True)           def __init__(self,member_id,food_style,describe_food_style,suplier_list):        self.member_id = member_id        self.food_style = food_style        self.describe_food_style = describe_food_style        self.suplier_list = suplier_list        class Gazebo_process_5th(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    is_new_project = db.Column(db.Boolean, default=True)    menu_type = db.Column(db.String(150), nullable=True)    business_operate = db.Column(db.String(150), nullable=True)    operate_yrs = db.Column(db.String(150), nullable=True)    street_loc = db.Column(db.String(150), nullable=True)    pop_sel_item = db.Column(db.String(150), nullable=True)    avg_spent_client = db.Column(db.Integer,default=0)    staff_need = db.Column(db.Integer,default=0)    day_hour_operate = db.Column(db.String(150), nullable=True)    is_formal_cat_quali = db.Column(db.Boolean, default=True)        def __init__(self,member_id,is_new_project,menu_type,business_operate,operate_yrs,street_loc,pop_sel_item,avg_spent_client, staff_need,day_hour_operate,is_formal_cat_quali):        self.member_id = member_id        self.is_new_project = is_new_project        self.menu_type = menu_type        self.business_operate = business_operate        self.operate_yrs = operate_yrs        self.street_loc = street_loc        self.pop_sel_item = pop_sel_item         self.avg_spent_client = avg_spent_client        self.staff_need = staff_need        self.day_hour_operate = day_hour_operate        self.is_formal_cat_quali = is_formal_cat_qualiclass Gazebo_process_6th(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    proof_of_ncass_doc = db.Column(db.String(255), nullable=True)    cv_doc = db.Column(db.String(255), nullable=True)    level_2_hygiene_doc = db.Column(db.String(255), nullable=True)    covid_19_safety_doc = db.Column(db.String(255), nullable=True)    health_safety_doc = db.Column(db.String(255), nullable=True)    first_aid_doc = db.Column(db.String(255), nullable=True)    fire_extinguisher_doc = db.Column(db.String(255), nullable=True)        def __init__(self,member_id,proof_of_ncass_doc,cv_doc,level_2_hygiene_doc,covid_19_safety_doc,health_safety_doc,first_aid_doc,fire_extinguisher_doc ):        self.member_id = member_id        self.proof_of_ncass_doc = proof_of_ncass_doc        self.cv_doc = cv_doc        self.level_2_hygiene_doc = level_2_hygiene_doc        self.covid_19_safety_doc = covid_19_safety_doc        self.health_safety_doc = health_safety_doc        self.first_aid_doc = first_aid_doc         self.fire_extinguisher_doc = fire_extinguisher_docclass Gazebo_process_7th(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    sustain_training_doc = db.Column(db.String(255), nullable=True)    haccp_training_doc = db.Column(db.String(255), nullable=True)    lpg_gas_safe_doc = db.Column(db.String(255), nullable=True)    copy_of_pass_doc = db.Column(db.String(255), nullable=True)    proof_of_insu_doc = db.Column(db.String(255), nullable=True)    about_exp = db.Column(db.String(255), nullable=True)        def __init__(self,member_id,sustain_training_doc,haccp_training_doc,lpg_gas_safe_doc,copy_of_pass_doc,proof_of_insu_doc,about_exp):        self.member_id = member_id        self.sustain_training_doc = sustain_training_doc        self.haccp_training_doc = haccp_training_doc        self.lpg_gas_safe_doc = lpg_gas_safe_doc        self.copy_of_pass_doc = copy_of_pass_doc        self.proof_of_insu_doc = proof_of_insu_doc        self.about_exp = about_exp       class Gazebo_process_8th(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    company_brand_name = db.Column(db.String(255), nullable=True)    reg_company_name = db.Column(db.String(255), nullable=True)    reg_company_no = db.Column(db.String(255), nullable=True)    reg_company_address = db.Column(db.String(255), nullable=True)    reg_trading_name = db.Column(db.String(255), nullable=True)    name_of_your_operation = db.Column(db.String(255), nullable=True)    retail_price = db.Column(db.String(255), nullable=True)    kitchen_uses = db.Column(db.String(255), nullable=True)    serving_methods = db.Column(db.String(255), nullable=True)    other_kitchen_items = db.Column(db.String(255), nullable=True)    all_the_equip_uses = db.Column(db.String(255), nullable=True)    drinks_serve = db.Column(db.String(255), nullable=True)    cooking_method = db.Column(db.String(255), nullable=True)    def __init__(self,member_id,company_brand_name,reg_company_name,reg_company_no,reg_company_address,reg_trading_name,name_of_your_operation,retail_price,kitchen_uses,serving_methods,other_kitchen_items,all_the_equip_uses,drinks_serve,cooking_method):        self.member_id = member_id        self.company_brand_name = company_brand_name        self.reg_company_name = reg_company_name        self.reg_company_no = reg_company_no        self.reg_company_address = reg_company_address        self.reg_trading_name = reg_trading_name        self.name_of_your_operation = name_of_your_operation        self.retail_price = retail_price        self.kitchen_uses = kitchen_uses        self.serving_methods = serving_methods        self.other_kitchen_items = other_kitchen_items        self.all_the_equip_uses = all_the_equip_uses          self.drinks_serve = drinks_serve        self.cooking_method = cooking_method  class Gazebo_process_9th(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    have_company_name = db.Column(db.String(255), nullable=True)    vat_reg = db.Column(db.String(255), nullable=True)    delivery_agents = db.Column(db.String(255), nullable=True)    about_your_business = db.Column(db.String(255), nullable=True)    length_of_trading = db.Column(db.String(255), nullable=True)    desired_commence = db.Column(db.String(255), nullable=True)    def __init__(self,member_id,have_company_name,vat_reg,delivery_agents,about_your_business,length_of_trading,desired_commence):        self.member_id = member_id        self.have_company_name = have_company_name        self.vat_reg = vat_reg        self.delivery_agents = delivery_agents        self.about_your_business = about_your_business        self.length_of_trading = length_of_trading        self.desired_commence = desired_commenceclass Gazebo_process_10th(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    daily_rental = db.Column(db.String(255), nullable=True)    clients_need = db.Column(db.String(255), nullable=True)    turnover = db.Column(db.String(255), nullable=True)       def __init__(self,member_id,daily_rental,clients_need,turnover):        self.member_id = member_id        self.daily_rental = daily_rental        self.clients_need = clients_need        self.turnover = turnover        class Gazebo_process_11th(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    specific_location = db.Column(db.String(255), nullable=True)    land_owner = db.Column(db.String(255), nullable=True)    jurisdict_authority = db.Column(db.String(255), nullable=True)    is_storage_req = db.Column(db.Boolean, default=False)       def __init__(self,member_id,specific_location,land_owner,jurisdict_authority,is_storage_req):        self.member_id = member_id        self.specific_location = specific_location        self.land_owner = land_owner        self.jurisdict_authority = jurisdict_authority        self.is_storage_req = is_storage_reqclass Food_style_details(db.Model):    id = db.Column(db.Integer, primary_key=True)    cuisine_name = db.Column(db.String(255), nullable=True)    created_date = db.Column(db.DateTime, default=datetime.datetime.utcnow)    status = db.Column(db.Boolean, default=False)class Gazebo_process_12th(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    signature = db.Column(db.String(255), nullable=True)       def __init__(self,member_id,signature):        self.member_id = member_id        self.signature = signature     class TraderDetails(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    address = db.Column(db.String(1000), nullable=True)    mobile = db.Column(db.BigInteger, unique=True, nullable=True)    email = db.Column(db.String(150), unique=True, nullable=True)    c_name = db.Column(db.String(150), nullable=True)    b_name = db.Column(db.String(150), nullable=True)    descrip_of_service = db.Column(db.String(1000), nullable=True)    story = db.Column(db.String(1000), nullable=True)    pub_lib_insu = db.Column(db.String(1000), nullable=True)    c_19risk_asses = db.Column(db.String(1000), nullable=True)    food_certi = db.Column(db.String(1000), nullable=True)    register_date = db.Column(db.DateTime, default=datetime.datetime.utcnow)    member_name = relationship(UserInfo)    def __init__(self, member_id, address, mobile, email, c_name, b_name, descrip_of_service, story,pub_lib_insu,c_19risk_asses,food_certi):        self.member_id = member_id        self.address = address        self.mobile = mobile        self.email = email        self.c_name = c_name        self.b_name = b_name        self.descrip_of_service = descrip_of_service        self.story = story        self.pub_lib_insu = pub_lib_insu        self.c_19risk_asses = c_19risk_asses        self.food_certi = food_certiclass SlotBookingDetails(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    book_by = db.Column(db.Integer)    choose_slot = db.Column(db.String(50), nullable=True)    select_date = db.Column(db.DateTime, default=datetime.datetime.utcnow)    booking_cost = db.Column(db.String(50), nullable=True)    register_date = db.Column(db.DateTime, default=datetime.datetime.utcnow)    is_expired = db.Column(db.Boolean, default=False)    hash_code = db.Column(db.String(255), nullable=True)    member_name = relationship(UserInfo)    '''    def __init__(self, member_id):        self.title = member_id    def __repr__(self):        return self.member_id    '''class ShowBookDate(db.Model):    id = db.Column(db.Integer, primary_key=True)    book_id = db.Column(db.Integer, db.ForeignKey(SlotBookingDetails.id, onupdate='CASCADE', ondelete='CASCADE'))    book_date = db.Column(db.Date)    slot = db.Column(db.Integer)class UserAccess(db.Model):    id = db.Column(db.Integer,primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    authenticate= db.Column(db.String(255), nullable=True)class MemberOrder(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    slot_book_id = db.Column(db.Integer, db.ForeignKey(SlotBookingDetails.id, onupdate='CASCADE', ondelete='CASCADE'))    amount = db.Column(db.String(100), nullable=True)    txn_id = db.Column(db.String(100), default='Pending', nullable=False)    payment_status = db.Column(db.String(20), default='Pending', nullable=False)    payment_response = db.Column(db.String(20), default='Pending', nullable=False)    create_at = db.Column(db.DateTime, default=datetime.datetime.utcnow)    member_name = relationship(UserInfo)class Contact(db.Model):    id = db.Column(db.Integer, primary_key=True)    full_name = db.Column(db.String(100), nullable=False)    email = db.Column(db.String(100), nullable=False)    subject = db.Column(db.String(300), nullable=True)    msg = db.Column(db.String(200), nullable=True)class SlotsInfo(db.Model):    id = db.Column(db.Integer, primary_key=True)    slot = db.Column(db.String(100), nullable=False)    price = db.Column(db.String(100), nullable=False)    slot_register = db.Column(db.DateTime, default=datetime.datetime.utcnow)class Slots(db.Model):    id = db.Column(db.Integer, primary_key=True)    slots = db.Column(db.String(100), nullable=False)class SampleCheckData(db.Model):    id = db.Column(db.Integer, primary_key=True)    member_id = db.Column(db.Integer, db.ForeignKey(UserInfo.id, onupdate='CASCADE', ondelete='CASCADE'))    choose_product = db.Column(db.String(100), nullable=True)    organic_produce = db.Column(db.Float(10,2), nullable=True)    seasonal_produce = db.Column(db.Float(10,2), nullable=True)    locally_grown = db.Column(db.Float(10,2), nullable=True)    zero_plastic = db.Column(db.Float(10,2), nullable=True)    zero_waste_to_landfill = db.Column(db.Float(10,2), nullable=True)    vegetable_meat_ratio = db.Column(db.Float(10,2), nullable=True)    nutritional_content = db.Column(db.Float(10,2), nullable=True)    non_sugar_drinks = db.Column(db.Float(10,2), nullable=True)    allergy_rating = db.Column(db.Float(10,2), nullable=True)    non_diary_drinks = db.Column(db.Float(10,2), nullable=True)    total_sus_score = db.Column(db.Float(10,2), nullable=True)    create_at = db.Column(db.DateTime, default=datetime.datetime.utcnow)    is_active = db.Column(db.Boolean, default=False)   class ProductList(db.Model):    id = db.Column(db.Integer, primary_key=True)    products = db.Column(db.String(100), nullable=True)    create_at = db.Column(db.DateTime, default=datetime.datetime.utcnow)    is_active = db.Column(db.Boolean, default=False)